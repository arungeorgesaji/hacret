---
import Layout from '../layouts/Layout.astro';
import '../styles/new-chatbot.css';
---

<Layout title="Create New Chatbot | SmartFlowchatbots">
  <main class="new-chatbot-container">
    <div class="chatbots-header">
      <h1>Create New Chatbot</h1>
      <a href="/chatbots" class="btn-outline">Back to Chatbots</a>
    </div>

    <div class="form-section">
      <h2>Chatbot Basics</h2>
      <div class="form-group">
        <label for="chatbot-name">Chatbot Name*</label>
        <input 
          type="text" 
          id="chatbot-name" 
          placeholder="e.g. Customer Support Bot" 
          required
        />
      </div>
    </div>

    <form class="chatbot-form" id="chatbot-creation-form">
      <div class="form-section">
        <h2>Slots</h2>
        <p class="form-hint">Define collectable slots (e.g., "user_name", "email")</p>

        <div id="slots-container">
          <div class="slot-entry" data-id="1">
            <div class="form-group">
              <div class="slot-input-wrapper">
                <label>Slot Name*</label>
                <input type="text" name="slot-1" placeholder="e.g. user_name" required />
              </div>
              <button type="button" class="btn-remove-slot">Remove</button>
            </div>
          </div>
        </div>

        <button type="button" id="add-slot-btn" class="btn-outline">+ Add Slot</button>
      </div>

      <div class="form-section">
        <h2>Intents</h2>
        <p class="form-hint">Define user intents and example phrases</p>
        
        <div id="intents-container">
          <div class="intent-entry" data-id="1">
            <div class="intent-header">
              <h3>Intent #1</h3>
              <button type="button" class="btn-remove">
                Remove
              </button>
            </div>
            
            <div class="form-group">
              <label>Intent Name*</label>
              <input 
                type="text" 
                name="intent-name-1"
                placeholder="greeting" 
                required
              />
              <p class="form-hint">Simple identifier for this intent</p>
            </div>
            
            <div class="form-group">
              <label>Example Phrases* (one per line)</label>
              <textarea 
                name="intent-examples-1"
                rows="3"
                placeholder="Hi\nHello\nMy name is {user_name}"
                required
              ></textarea>
            </div>

            <div class="slot-mappings" id="slot-mappings-1"></div>
          </div>
        </div>
        
        <button type="button" id="add-intent-btn" class="btn-outline">
          + Add New Intent
        </button>
      </div>

      <div class="form-section">
        <h2>Responses</h2>
        <p class="form-hint">Define bot responses to intents</p>
        
        <div id="utterances-container">
          <div class="utterance-entry" data-id="1">
            <div class="utterance-header">
              <h3>Response #1</h3>
              <button type="button" class="btn-remove">
                Remove
              </button>
            </div>
            
            <div class="form-group">
              <label>Response Name*</label>
              <input 
                type="text" 
                name="utterance-name-1"
                placeholder="greet" 
                required
              />
              <p class="form-hint">Simple identifier for response</p>
            </div>
            
            <div class="form-group">
              <label>Response Text*</label>
              <textarea 
                name="utterance-text-1"
                rows="2"
                placeholder="Hello! How can I help you today?"
                required
              ></textarea>
            </div>
          </div>
        </div>
        
        <button type="button" id="add-utterance-btn" class="btn-outline">
          + Add New Response
        </button>
      </div>

      <div class="form-section">
        <h2>Intent Mapping</h2>
        <p class="form-hint">Map intents to either responses or form activations</p>
        
        <div id="mappings-container">
          <div class="mapping-entry" data-id="1">
            <div class="mapping-header">
              <h3>Mapping #1</h3>
              <button type="button" class="btn-remove-mapping">Remove</button>
            </div>
            
            <div class="form-group">
              <label>Intent</label>
              <select name="mapping-intent-1" required>
                <option value="">Select an intent...</option>
              </select>
            </div>
            
            <div class="form-group">
              <label>Response Type</label>
              <select name="mapping-type-1" class="mapping-type-select" required>
                <option value="">Select type...</option>
                <option value="response">Bot Response</option>
                <option value="form">Form Activation</option>
              </select>
            </div>
            
            <div class="form-group mapping-value-container" id="mapping-value-1"></div>
          </div>
        </div>
  
        <button type="button" id="add-mapping-btn" class="btn-outline">
          + Add New Mapping
        </button>
      </div>

      <div class="form-section">
        <h2>Forms</h2>
        <p class="form-hint">Define forms for collecting multiple slots in sequence</p>
        
        <div id="forms-container">
          <div class="form-definition-entry" data-id="1">
            <div class="form-definition-header">
              <h3>Form #1</h3>
              <button type="button" class="btn-remove-form">Remove</button>
            </div>
            
            <div class="form-group">
              <label>Form Name*</label>
              <input 
                type="text" 
                name="form-name-1"
                placeholder="e.g. user_registration" 
                required
              />
            </div>
            
            <div class="form-group">
              <label>Required Slots (in order)*</label>
              <div class="slot-order-container" id="slot-order-1">
                <div class="slot-order-item">
                  <select name="form-slot-1-1" required>
                    <option value="">Select slot...</option>
                  </select>
                  <button type="button" class="btn-remove-slot-order">Remove</button>
                </div>
              </div>
              <br> 
              <button type="button" class="btn-add-slot-order" data-form-id="1">+ Add Slot</button>
            </div>
          </div>
        </div>
        
        <button type="button" id="add-form-btn" class="btn-outline">
          + Add New Form
        </button>
      </div>

      <div class="form-section">
        <h2>Stories</h2>
        <p class="form-hint">Define conversation flows and training stories</p>
        
        <div id="stories-container">
          <div class="story-entry" data-id="1">
            <div class="story-header">
              <h3>Story #1</h3>
              <button type="button" class="btn-remove-story">Remove</button>
            </div>
            
            <div class="form-group">
              <label>Story Name*</label>
              <input 
                type="text" 
                name="story-name-1"
                placeholder="e.g. greeting_flow" 
                required
              />
            </div>
            
            <div class="form-group">
              <label>Story Steps*</label>
              <div class="story-steps-container" id="story-steps-1">
                <div class="story-step" data-step="1">
                  <div class="step-header">
                    <span>Step 1</span>
                    <button type="button" class="btn-remove-step">Remove</button>
                  </div>
                  <div class="step-content">
                    <select name="step-type-1-1" class="step-type-select" required>
                      <option value="">Select step type...</option>
                      <option value="intent">User Intent</option>
                      <option value="action">Bot Response</option>
                      <option value="slot">Slot Setting</option>
                      <option value="form">Form Activation</option>
                    </select>
                    <div class="step-value-container" id="step-value-1-1"></div>
                  </div>
                </div>
              </div>
              <br>
              <button type="button" class="btn-add-step" data-story-id="1">+ Add Step</button>
            </div>
          </div>
        </div>
        
        <button type="button" id="add-story-btn" class="btn-outline">
          + Add New Story
        </button>
      </div>

      <div class="form-actions">
        <button type="submit" class="btn-primary">Create Chatbot</button>
      </div>
    </form>
  </main>

  <script>
    let slotCount = 1;
    let intentCount = 1;
    let utteranceCount = 1;
    let mappingCount = 1;
    let formCount = 1;
    let storyCount = 1;
    let stepCounts = {1: 1}; 

    function attachSlotRemoveListener(slotElement) {
      const removeBtn = slotElement.querySelector('.btn-remove-slot');
      if (removeBtn) {
        removeBtn.addEventListener('click', () => {
          slotElement.remove();
          updateAllSlotMappings();
          updateAllDropdowns();
        });
      }
    }

    function getAvailableSlots() {
        const slots = [];
        document.querySelectorAll('#slots-container input[name^="slot-"]').forEach(input => {
            if (input.value.trim()) {
                slots.push(input.value.trim());
            }
        });
        return slots;
    }

    function getAvailableIntents() {
        const intents = [];
        document.querySelectorAll('[name^="intent-name-"]').forEach(input => {
            if (input.value.trim()) {
                intents.push({
                    name: input.value.trim(),
                    id: input.name.split('-').pop()
                });
            }
        });
        return intents;
    }

    function getAvailableResponses() {
        const responses = [];
        document.querySelectorAll('[name^="utterance-name-"]').forEach(input => {
            if (input.value.trim()) {
                responses.push({
                    name: input.value.trim(),
                    id: input.name.split('-').pop()
                });
            }
        });
        return responses;
    }

    function getAvailableForms() {
        const forms = [];
        document.querySelectorAll('[name^="form-name-"]').forEach(input => {
            if (input.value.trim()) {
                forms.push({
                    name: input.value.trim(),
                    id: input.name.split('-').pop()
                });
            }
        });
        return forms;
    }

    function updateAllDropdowns() {
        updateMappingDropdowns();
        updateFormSlotDropdowns();
        updateStoryStepDropdowns();
    }

    function updateMappingDropdowns() {
        const intents = getAvailableIntents();
        const responses = getAvailableResponses();

        document.querySelectorAll('[name^="mapping-intent-"]').forEach(select => {
            const currentValue = select.value;
            select.innerHTML = '<option value="">Select an intent...</option>';
            intents.forEach(intent => {
                const option = document.createElement('option');
                option.value = intent.name;
                option.textContent = intent.name;
                if (intent.name === currentValue) option.selected = true;
                select.appendChild(option);
            });
        });

        document.querySelectorAll('[name^="mapping-response-"]').forEach(select => {
            const currentValue = select.value;
            select.innerHTML = '<option value="">Select a response...</option>';
            responses.forEach(response => {
                const option = document.createElement('option');
                option.value = response.name;
                option.textContent = response.name;
                if (response.name === currentValue) option.selected = true;
                select.appendChild(option);
            });
        });
    }

    function updateFormSlotDropdowns() {
        const slots = getAvailableSlots();
        
        document.querySelectorAll('[name^="form-slot-"]').forEach(select => {
            const currentValue = select.value;
            select.innerHTML = '<option value="">Select slot...</option>';
            slots.forEach(slot => {
                const option = document.createElement('option');
                option.value = slot;
                option.textContent = slot;
                if (slot === currentValue) option.selected = true;
                select.appendChild(option);
            });
        });
    }

    function updateStoryStepDropdowns() {
        document.querySelectorAll('.step-type-select').forEach(select => {
            const stepContainer = select.closest('.story-step');
            const valueContainer = stepContainer.querySelector('.step-value-container');
            
            select.addEventListener('change', function() {
                updateStepValueOptions(this, valueContainer);
            });
            
            if (select.value) {
                updateStepValueOptions(select, valueContainer);
            }
        });
    }

    function updateStepValueOptions(typeSelect, valueContainer) {
        const stepType = typeSelect.value;
        const stepId = typeSelect.name.replace('step-type-', '');
        
        let html = '';
        
        switch(stepType) {
            case 'intent':
                const intents = getAvailableIntents();
                html = `
                    <select name="step-value-${stepId}" required>
                        <option value="">Select intent...</option>
                        ${intents.map(intent => `<option value="${intent.name}">${intent.name}</option>`).join('')}
                    </select>
                `;
                break;
            case 'action':
                const responses = getAvailableResponses();
                html = `
                    <select name="step-value-${stepId}" required>
                        <option value="">Select response...</option>
                        ${responses.map(response => `<option value="${response.name}">${response.name}</option>`).join('')}
                    </select>
                `;
                break;
            case 'slot':
                const slots = getAvailableSlots();
                html = `
                    <div class="slot-setting">
                        <select name="step-slot-${stepId}" required>
                            <option value="">Select slot...</option>
                            ${slots.map(slot => `<option value="${slot}">${slot}</option>`).join('')}
                        </select>
                        <input type="text" name="step-value-${stepId}" placeholder="Slot value" required />
                    </div>
                `;
                break;
            case 'form':
                const forms = getAvailableForms();
                html = `
                    <select name="step-value-${stepId}" required>
                        <option value="">Select form...</option>
                        ${forms.map(form => `<option value="${form.name}">${form.name}</option>`).join('')}
                    </select>
                `;
                break;
        }
        
        valueContainer.innerHTML = html;
    }

    function extractPlaceholders(text) {
        const regex = /{([^}]+)}/g;
        const placeholders = [];
        let match;
        while ((match = regex.exec(text)) !== null) {
            if (!placeholders.includes(match[1])) {
                placeholders.push(match[1]);
            }
        }
        return placeholders;
    }

    function updateSlotMappings(intentId) {
        const textarea = document.querySelector(`[name="intent-examples-${intentId}"]`);
        const mappingsContainer = document.getElementById(`slot-mappings-${intentId}`);
        
        if (!textarea || !mappingsContainer) return;

        const text = textarea.value;
        const placeholders = extractPlaceholders(text);
        const availableSlots = getAvailableSlots();

        if (placeholders.length === 0) {
            mappingsContainer.innerHTML = '';
            return;
        }

        let mappingsHTML = `
            <div class="slot-mapping">
                <h4>Slot Mappings</h4>
                <p class="form-hint">Map placeholders to your defined slots:</p>
        `;

        placeholders.forEach(placeholder => {
            mappingsHTML += `
                <div class="slot-mapping-item">
                    <span class="placeholder-text">{${placeholder}}</span>
                    <span>→</span>
                    <select name="slot-mapping-${intentId}-${placeholder}">
                        <option value="">Select slot...</option>
                        ${availableSlots.map(slot => `
                            <option value="${slot}" ${slot === placeholder ? 'selected' : ''}>
                                ${slot}
                            </option>
                        `).join('')}
                    </select>
                </div>
            `;
        });

        mappingsHTML += '</div>';
        mappingsContainer.innerHTML = mappingsHTML;
    }

    function updateAllSlotMappings() {
        document.querySelectorAll('.intent-entry').forEach(intent => {
            const id = intent.dataset.id;
            updateSlotMappings(id);
        });
    }

    function attachIntentListeners(intentElement) {
        const id = intentElement.dataset.id;
        const textarea = intentElement.querySelector(`[name="intent-examples-${id}"]`);
        const nameInput = intentElement.querySelector(`[name="intent-name-${id}"]`);
        
        if (textarea) {
            textarea.addEventListener('input', () => {
                updateSlotMappings(id); 
            });
        }
        
        if (nameInput) {
            nameInput.addEventListener('input', updateAllDropdowns);
        }
    }

    function removeIntent(id) {
      const intent = document.querySelector(`.intent-entry[data-id="${id}"]`);
      if (intent) {
        intent.remove();
        
        const intents = document.querySelectorAll('.intent-entry');
        intents.forEach((intent, index) => {
          const newId = index + 1;
          intent.dataset.id = newId;
          intent.querySelector('h3').textContent = `Intent #${newId}`;
          
          intent.querySelectorAll('[name^="intent-name-"]').forEach(input => {
            input.name = `intent-name-${newId}`;
          });
          intent.querySelectorAll('[name^="intent-examples-"]').forEach(input => {
            input.name = `intent-examples-${newId}`;
          });
          
          const mappingsContainer = intent.querySelector('.slot-mappings');
          if (mappingsContainer) {
            mappingsContainer.id = `slot-mappings-${newId}`;
          }
        });
        
        intentCount = intents.length;
        updateAllDropdowns();
      }
    }

    function removeUtterance(id) {
      const utterance = document.querySelector(`.utterance-entry[data-id="${id}"]`);
      if (utterance) {
        utterance.remove();
        
        const utterances = document.querySelectorAll('.utterance-entry');
        utterances.forEach((utterance, index) => {
          const newId = index + 1;
          utterance.dataset.id = newId;
          utterance.querySelector('h3').textContent = `Response #${newId}`;
          
          utterance.querySelectorAll('[name^="utterance-name-"]').forEach(input => {
            input.name = `utterance-name-${newId}`;
          });
          utterance.querySelectorAll('[name^="utterance-text-"]').forEach(input => {
            input.name = `utterance-text-${newId}`;
          });
        });
        
        utteranceCount = utterances.length;
        updateAllDropdowns();
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const initialSlot = document.querySelector('.slot-entry[data-id="1"]');
      if (initialSlot) {
        attachSlotRemoveListener(initialSlot);
        const slotInput = initialSlot.querySelector('input');
        if (slotInput) {
          slotInput.addEventListener('input', () => {
            updateAllSlotMappings();
            updateAllDropdowns();
          });
        }
      }

      const initialIntent = document.querySelector('.intent-entry[data-id="1"]');
      if (initialIntent) {
        attachIntentListeners(initialIntent);
        const initialIntentRemove = initialIntent.querySelector('.btn-remove');
        if (initialIntentRemove) {
          initialIntentRemove.addEventListener('click', () => removeIntent(1));
        }
      }

      const initialUtteranceRemove = document.querySelector('.utterance-entry .btn-remove');
      if (initialUtteranceRemove) {
        initialUtteranceRemove.addEventListener('click', () => removeUtterance(1));
        const nameInput = document.querySelector('[name="utterance-name-1"]');
        if (nameInput) {
          nameInput.addEventListener('input', updateAllDropdowns);
        }
      }

      const initialMappingRemove = document.querySelector('.mapping-entry .btn-remove-mapping');
      if (initialMappingRemove) {
        initialMappingRemove.addEventListener('click', () => removeMapping(1));
      }

      const initialFormRemove = document.querySelector('.btn-remove-form');
      if (initialFormRemove) {
        initialFormRemove.addEventListener('click', () => removeForm(1));
        const nameInput = document.querySelector('[name="form-name-1"]');
        if (nameInput) {
          nameInput.addEventListener('input', updateAllDropdowns);
        }
      }

      const initialStoryRemove = document.querySelector('.btn-remove-story');
      if (initialStoryRemove) {
        initialStoryRemove.addEventListener('click', () => removeStory(1));
      }

      updateStoryStepDropdowns();

      document.getElementById('add-slot-btn').addEventListener('click', () => {
        slotCount++;
        const newSlot = document.createElement('div');
        newSlot.className = 'slot-entry';
        newSlot.dataset.id = slotCount;
        newSlot.innerHTML = `
          <div class="form-group">
            <div class="slot-input-wrapper">
              <label>Slot Name*</label>
              <input type="text" name="slot-${slotCount}" placeholder="e.g. email" required />
            </div>
            <button type="button" class="btn-remove-slot">Remove</button>
          </div>
        `;
        document.getElementById('slots-container').appendChild(newSlot);
        attachSlotRemoveListener(newSlot);

        const slotInput = newSlot.querySelector('input');
        if (slotInput) {
          slotInput.addEventListener('input', () => {
            updateAllSlotMappings();
            updateAllDropdowns();
          });
        }
      });

      document.getElementById('add-intent-btn').addEventListener('click', () => {
        intentCount++;
        const newIntent = document.createElement('div');
        newIntent.className = 'intent-entry';
        newIntent.dataset.id = intentCount;
        newIntent.innerHTML = `
          <div class="intent-header">
            <h3>Intent #${intentCount}</h3>
            <button type="button" class="btn-remove">
              Remove
            </button>
          </div>
          
          <div class="form-group">
            <label>Intent Name*</label>
            <input 
              type="text" 
              name="intent-name-${intentCount}"
              placeholder="greeting" 
              required
            />
            <p class="form-hint">Simple identifier for this intent</p>
          </div>
          
          <div class="form-group">
            <label>Example Phrases* (one per line)</label>
            <textarea 
              name="intent-examples-${intentCount}"
              rows="3"
              placeholder="Hi\nHello\nHey there"
              required
            ></textarea>
          </div>

          <div class="slot-mappings" id="slot-mappings-${intentCount}"></div>
        `;
        document.getElementById('intents-container').appendChild(newIntent);
        
        attachIntentListeners(newIntent);
        newIntent.querySelector('.btn-remove').addEventListener('click', () => removeIntent(intentCount));
      });

      document.getElementById('add-utterance-btn').addEventListener('click', () => {
        utteranceCount++;
        const newUtterance = document.createElement('div');
        newUtterance.className = 'utterance-entry';
        newUtterance.dataset.id = utteranceCount;
        newUtterance.innerHTML = `
          <div class="utterance-header">
            <h3>Response #${utteranceCount}</h3>
            <button type="button" class="btn-remove">
              Remove
            </button>
          </div>
          
          <div class="form-group">
            <label>Response Name*</label>
            <input 
              type="text" 
              name="utterance-name-${utteranceCount}"
              placeholder="greet" 
              required
            />
            <p class="form-hint">Simple identifier for this response</p>
          </div>
          
          <div class="form-group">
            <label>Response Text*</label>
            <textarea 
              name="utterance-text-${utteranceCount}"
              rows="2"
              placeholder="Hello! How can I help you today?"
              required
            ></textarea>
          </div>
        `;
        document.getElementById('utterances-container').appendChild(newUtterance);
        const removeBtn = newUtterance.querySelector('.btn-remove');
        removeBtn.addEventListener('click', () => removeUtterance(utteranceCount));
        
        const nameInput = newUtterance.querySelector(`[name="utterance-name-${utteranceCount}"]`);
        if (nameInput) {
          nameInput.addEventListener('input', updateAllDropdowns);
        }
      });

      function updateMappingValueOptions(typeSelect, valueContainer) {
        const mappingId = typeSelect.name.replace('mapping-type-', '');
        
        let html = '';
        
        if (typeSelect.value === 'response') {
          const responses = getAvailableResponses();
          html = `
            <label>Bot Response</label>
            <select name="mapping-response-${mappingId}" required>
              <option value="">Select a response...</option>
              ${responses.map(response => `<option value="${response.name}">${response.name}</option>`).join('')}
            </select>
          `;
        } else if (typeSelect.value === 'form') {
          const forms = getAvailableForms();
          html = `
            <label>Form to Activate</label>
            <select name="mapping-form-${mappingId}" required>
              <option value="">Select a form...</option>
              ${forms.map(form => `<option value="${form.name}">${form.name}</option>`).join('')}
            </select>
          `;
        }
        
        valueContainer.innerHTML = html;
      }

      function updateAllMappingDropdowns() {
        document.querySelectorAll('.mapping-type-select').forEach(select => {
          const mappingContainer = select.closest('.mapping-entry');
          const valueContainer = mappingContainer.querySelector('.mapping-value-container');
          
          select.addEventListener('change', function() {
            updateMappingValueOptions(this, valueContainer);
          });
          
          if (select.value) {
            updateMappingValueOptions(select, valueContainer);
          }
        });
      }

      document.getElementById('add-mapping-btn').addEventListener('click', () => {
        mappingCount++;
        const newMapping = document.createElement('div');
        newMapping.className = 'mapping-entry';
        newMapping.dataset.id = mappingCount;
        newMapping.innerHTML = `
          <div class="mapping-header">
            <h3>Mapping #${mappingCount}</h3>
            <button type="button" class="btn-remove-mapping">Remove</button>
          </div>
          
          <div class="form-group">
            <label>Intent</label>
            <select name="mapping-intent-${mappingCount}" required>
              <option value="">Select an intent...</option>
            </select>
          </div>
          
          <div class="form-group">
            <label>Response Type</label>
            <select name="mapping-type-${mappingCount}" class="mapping-type-select" required>
              <option value="">Select type...</option>
              <option value="response">Bot Response</option>
              <option value="form">Form Activation</option>
            </select>
          </div>
          
          <div class="form-group mapping-value-container" id="mapping-value-${mappingCount}"></div>
        `;
        document.getElementById('mappings-container').appendChild(newMapping);
        newMapping.querySelector('.btn-remove-mapping').addEventListener('click', () => removeMapping(mappingCount));
        
        const typeSelect = newMapping.querySelector('.mapping-type-select');
        const valueContainer = newMapping.querySelector('.mapping-value-container');
        typeSelect.addEventListener('change', () => {
          updateMappingValueOptions(typeSelect, valueContainer);
        });
        
        updateAllDropdowns();
      });

// Update the form submission handler to collect the new mapping data
document.getElementById('chatbot-creation-form').addEventListener('submit', (e) => {
  e.preventDefault();
  
  const chatbotData = {
    mappings: []
  };

  document.querySelectorAll('.mapping-entry').forEach(mapping => {
    const id = mapping.dataset.id;
    const intentSelect = mapping.querySelector(`[name="mapping-intent-${id}"]`);
    const typeSelect = mapping.querySelector(`[name="mapping-type-${id}"]`);
    
    if (intentSelect.value && typeSelect.value) {
      const mappingData = {
        intent: intentSelect.value,
        type: typeSelect.value
      };
      
      if (typeSelect.value === 'response') {
        const responseSelect = mapping.querySelector(`[name="mapping-response-${id}"]`);
        if (responseSelect.value) {
          mappingData.response = responseSelect.value;
        }
      } else if (typeSelect.value === 'form') {
        const formSelect = mapping.querySelector(`[name="mapping-form-${id}"]`);
        if (formSelect.value) {
          mappingData.form = formSelect.value;
        }
      }
      
      chatbotData.mappings.push(mappingData);
    }
  });
  
  console.log('Complete chatbot data to submit:', chatbotData);
  alert('Chatbot created successfully! (Check console for complete data structure)');
});


      document.getElementById('add-form-btn').addEventListener('click', () => {
        formCount++;
        const newForm = document.createElement('div');
        newForm.className = 'form-definition-entry';
        newForm.dataset.id = formCount;
        newForm.innerHTML = `
          <div class="form-definition-header">
            <h3>Form #${formCount}</h3>
            <button type="button" class="btn-remove-form">Remove</button>
          </div>
          
          <div class="form-group">
            <label>Form Name*</label>
            <input 
              type="text" 
              name="form-name-${formCount}"
              placeholder="e.g. user_registration" 
              required
            />
          </div>
          
          <div class="form-group">
            <label>Required Slots (in order)*</label>
            <div class="slot-order-container" id="slot-order-${formCount}">
              <div class="slot-order-item">
                <select name="form-slot-${formCount}-1" required>
                  <option value="">Select slot...</option>
                </select>
                <button type="button" class="btn-remove-slot-order">Remove</button>
              </div>
            </div>
            <br>
            <button type="button" class="btn-add-slot-order" data-form-id="${formCount}">+ Add Slot</button>
          </div>
        `;
        document.getElementById('forms-container').appendChild(newForm);
        newForm.querySelector('.btn-remove-form').addEventListener('click', () => removeForm(formCount));
        
        const nameInput = newForm.querySelector(`[name="form-name-${formCount}"]`);
        if (nameInput) {
          nameInput.addEventListener('input', updateAllDropdowns);
        }
        
        updateFormSlotDropdowns();
        attachFormListeners(newForm);
      });

      document.getElementById('add-story-btn').addEventListener('click', () => {
        storyCount++;
        stepCounts[storyCount] = 1;
        const newStory = document.createElement('div');
        newStory.className = 'story-entry';
        newStory.dataset.id = storyCount;
        newStory.innerHTML = `
          <div class="story-header">
            <h3>Story #${storyCount}</h3>
            <button type="button" class="btn-remove-story">Remove</button>
          </div>
          
          <div class="form-group">
            <label>Story Name*</label>
            <input 
              type="text" 
              name="story-name-${storyCount}"
              placeholder="e.g. greeting_flow" 
              required
            />
          </div>
          
          <div class="form-group">
            <label>Story Steps*</label>
            <div class="story-steps-container" id="story-steps-${storyCount}">
              <div class="story-step" data-step="1">
                <div class="step-header">
                  <span>Step 1</span>
                  <button type="button" class="btn-remove-step">Remove</button>
                </div>
                <div class="step-content">
                  <select name="step-type-${storyCount}-1" class="step-type-select" required>
                      <option value="">Select step type...</option>
                      <option value="intent">User Intent</option>
                      <option value="action">Bot Response</option>
                      <option value="slot">Slot Setting</option>
                      <option value="form">Form Activation</option>
                    </select>
                    <div class="step-value-container" id="step-value-${storyCount}-1"></div>
                  </div>
                </div>
              </div>
              <br>
              <button type="button" class="btn-add-step" data-story-id="${storyCount}">+ Add Step</button>
            </div>
          </div>
        `;
        document.getElementById('stories-container').appendChild(newStory);
        newStory.querySelector('.btn-remove-story').addEventListener('click', () => removeStory(storyCount));
        updateStoryStepDropdowns();
        attachStoryListeners(newStory);
      });
    });

    function removeMapping(id) {
      const mapping = document.querySelector(`.mapping-entry[data-id="${id}"]`);
      if (mapping) {
        mapping.remove();
        
        const mappings = document.querySelectorAll('.mapping-entry');
        mappings.forEach((mapping, index) => {
          const newId = index + 1;
          mapping.dataset.id = newId;
          mapping.querySelector('h3').textContent = `Mapping #${newId}`;
          
          mapping.querySelectorAll('[name^="mapping-intent-"]').forEach(input => {
            input.name = `mapping-intent-${newId}`;
          });
          mapping.querySelectorAll('[name^="mapping-response-"]').forEach(input => {
            input.name = `mapping-response-${newId}`;
          });
        });
        
        mappingCount = mappings.length;
      }
    }

    function removeForm(id) {
      const form = document.querySelector(`.form-definition-entry[data-id="${id}"]`);
      if (form) {
        form.remove();
        
        const forms = document.querySelectorAll('.form-definition-entry');
        forms.forEach((form, index) => {
          const newId = index + 1;
          form.dataset.id = newId;
          form.querySelector('h3').textContent = `Form #${newId}`;
          
          form.querySelectorAll('[name^="form-name-"]').forEach(input => {
            input.name = `form-name-${newId}`;
          });
          
          const container = form.querySelector('.slot-order-container');
          if (container) {
            container.id = `slot-order-${newId}`;
          }
          
          const addBtn = form.querySelector('.btn-add-slot-order');
          if (addBtn) {
            addBtn.dataset.formId = newId;
          }
        });
        
        formCount = forms.length;
        updateAllDropdowns();
      }
    }

    function removeStory(id) {
      const story = document.querySelector(`.story-entry[data-id="${id}"]`);
      if (story) {
        story.remove();
        delete stepCounts[id];
        
        const stories = document.querySelectorAll('.story-entry');
        const newStepCounts = {};
        
        stories.forEach((story, index) => {
          const newId = index + 1;
          const oldId = story.dataset.id;
          newStepCounts[newId] = stepCounts[oldId] || 1;
          
          story.dataset.id = newId;
          story.querySelector('h3').textContent = `Story #${newId}`;
          
          story.querySelectorAll('[name^="story-name-"]').forEach(input => {
            input.name = `story-name-${newId}`;
          });
          
          const container = story.querySelector('.story-steps-container');
          if (container) {
            container.id = `story-steps-${newId}`;
          }
          
          const addBtn = story.querySelector('.btn-add-step');
          if (addBtn) {
            addBtn.dataset.storyId = newId;
          }
        });
        
        stepCounts = newStepCounts;
        storyCount = stories.length;
      }
    }

    function attachFormListeners(formElement) {
      const formId = formElement.dataset.id;
      
      const addSlotBtn = formElement.querySelector('.btn-add-slot-order');
      if (addSlotBtn) {
        addSlotBtn.addEventListener('click', () => {
          const container = document.getElementById(`slot-order-${formId}`);
          const slotCount = container.children.length + 1;
          
          const newSlotOrder = document.createElement('div');
          newSlotOrder.className = 'slot-order-item';
          newSlotOrder.innerHTML = `
            <select name="form-slot-${formId}-${slotCount}" required>
              <option value="">Select slot...</option>
            </select>
            <button type="button" class="btn-remove-slot-order">Remove</button>
          `;
          
          container.appendChild(newSlotOrder);
          updateFormSlotDropdowns();
          
          newSlotOrder.querySelector('.btn-remove-slot-order').addEventListener('click', () => {
            newSlotOrder.remove();
          });
        });
      }
      
      formElement.querySelectorAll('.btn-remove-slot-order').forEach(btn => {
        btn.addEventListener('click', () => {
          btn.closest('.slot-order-item').remove();
        });
      });
    }

    function attachStoryListeners(storyElement) {
      const storyId = storyElement.dataset.id;
      
      const addStepBtn = storyElement.querySelector('.btn-add-step');
      if (addStepBtn) {
        addStepBtn.addEventListener('click', () => {
          stepCounts[storyId] = (stepCounts[storyId] || 1) + 1;
          const stepNum = stepCounts[storyId];
          
          const container = document.getElementById(`story-steps-${storyId}`);
          const newStep = document.createElement('div');
          newStep.className = 'story-step';
          newStep.dataset.step = stepNum;
          newStep.innerHTML = `
            <div class="step-header">
              <span>Step ${stepNum}</span>
              <button type="button" class="btn-remove-step">Remove</button>
            </div>
            <div class="step-content">
              <select name="step-type-${storyId}-${stepNum}" class="step-type-select" required>
                <option value="">Select step type...</option>
                <option value="intent">User Intent</option>
                <option value="action">Bot Response</option>
                <option value="slot">Slot Setting</option>
                <option value="form">Form Activation</option>
              </select>
              <div class="step-value-container" id="step-value-${storyId}-${stepNum}"></div>
            </div>
          `;
          
          container.appendChild(newStep);
          updateStoryStepDropdowns();
          
          newStep.querySelector('.btn-remove-step').addEventListener('click', () => {
            newStep.remove();
            const remainingSteps = container.querySelectorAll('.story-step');
            remainingSteps.forEach((step, index) => {
              const newStepNum = index + 1;
              step.dataset.step = newStepNum;
              step.querySelector('.step-header span').textContent = `Step ${newStepNum}`;
            });
            stepCounts[storyId] = remainingSteps.length;
          });
        });
      }
      
      storyElement.querySelectorAll('.btn-remove-step').forEach(btn => {
        btn.addEventListener('click', () => {
          const step = btn.closest('.story-step');
          const container = step.closest('.story-steps-container');
          step.remove();
          
          const remainingSteps = container.querySelectorAll('.story-step');
          remainingSteps.forEach((step, index) => {
            const newStepNum = index + 1;
            step.dataset.step = newStepNum;
            step.querySelector('.step-header span').textContent = `Step ${newStepNum}`;
          });
          stepCounts[storyId] = remainingSteps.length;
        });
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      const existingForm = document.querySelector('.form-definition-entry[data-id="1"]');
      if (existingForm) {
        attachFormListeners(existingForm);
      }
      
      const existingStory = document.querySelector('.story-entry[data-id="1"]');
      if (existingStory) {
        attachStoryListeners(existingStory);
      }
    });
    
    document.getElementById('chatbot-creation-form').addEventListener('submit', (e) => {
      e.preventDefault();
      
      const chatbotData = {
        name: document.getElementById('chatbot-name').value,
        slots: [],
        intents: [],
        utterances: [],
        mappings: [],
        forms: [],
        stories: []
      };

      document.querySelectorAll('#slots-container .slot-entry').forEach(slot => {
        const input = slot.querySelector('input');
        if (input && input.value.trim()) {
          chatbotData.slots.push(input.value.trim());
        }
      });

      document.querySelectorAll('.intent-entry').forEach(intent => {
        const id = intent.dataset.id;
        const intentData = {
          name: intent.querySelector(`[name="intent-name-${id}"]`).value,
          examples: intent.querySelector(`[name="intent-examples-${id}"]`).value.split('\n').filter(q => q.trim()),
          slotMappings: {}
        };

        intent.querySelectorAll(`[name^="slot-mapping-${id}-"]`).forEach(select => {
          if (select.value) {
            const placeholder = select.name.split('-').pop();
            intentData.slotMappings[placeholder] = select.value;
          }
        });

        chatbotData.intents.push(intentData);
      });

      document.querySelectorAll('.utterance-entry').forEach(utterance => {
        const id = utterance.dataset.id;
        chatbotData.utterances.push({
          name: utterance.querySelector(`[name="utterance-name-${id}"]`).value,
          text: utterance.querySelector(`[name="utterance-text-${id}"]`).value
        });
      });

      document.querySelectorAll('.mapping-entry').forEach(mapping => {
    const id = mapping.dataset.id;
    const intentSelect = mapping.querySelector(`[name="mapping-intent-${id}"]`);
    const typeSelect = mapping.querySelector(`[name="mapping-type-${id}"]`);
    
    if (intentSelect.value && typeSelect.value) {
      const mappingData = {
            intent: intentSelect.value,
            type: typeSelect.value
          };
          
          if (typeSelect.value === 'response') {
            const responseSelect = mapping.querySelector(`[name="mapping-response-${id}"]`);
            if (responseSelect.value) {
              mappingData.response = responseSelect.value;
            }
          } else if (typeSelect.value === 'form') {
            const formSelect = mapping.querySelector(`[name="mapping-form-${id}"]`);
            if (formSelect.value) {
              mappingData.form = formSelect.value;
            }
          }
          
          chatbotData.mappings.push(mappingData);
        }
      });

      document.querySelectorAll('.form-definition-entry').forEach(form => {
        const id = form.dataset.id;
        const formData = {
          name: form.querySelector(`[name="form-name-${id}"]`).value,
          requiredSlots: []
        };

        form.querySelectorAll(`[name^="form-slot-${id}-"]`).forEach(select => {
          if (select.value) {
            formData.requiredSlots.push(select.value);
          }
        });

        chatbotData.forms.push(formData);
      });

      document.querySelectorAll('.story-entry').forEach(story => {
        const id = story.dataset.id;
        const storyData = {
          name: story.querySelector(`[name="story-name-${id}"]`).value,
          steps: []
        };

        story.querySelectorAll('.story-step').forEach(step => {
          const stepNum = step.dataset.step;
          const typeSelect = step.querySelector(`[name="step-type-${id}-${stepNum}"]`);
          const valueInput = step.querySelector(`[name="step-value-${id}-${stepNum}"]`);
          const slotInput = step.querySelector(`[name="step-slot-${id}-${stepNum}"]`);
          
          if (typeSelect && typeSelect.value) {
            const stepData = {
              type: typeSelect.value,
              value: valueInput ? valueInput.value : null
            };
            
            if (typeSelect.value === 'slot' && slotInput) {
              stepData.slot = slotInput.value;
            }
            
            storyData.steps.push(stepData);
          }
        });

        chatbotData.stories.push(storyData);
      });
      
      console.log('Complete chatbot data to submit:', chatbotData);
      alert('Chatbot created successfully! (Check console for complete data structure)');
    });
  </script>
</Layout>
