---
import Layout from '../layouts/Layout.astro';
import '../styles/new-chatbot.css';
---

<Layout title="Create New Chatbot | SmartFlowchatbots">
  <main class="new-chatbot-container">
    <div class="chatbots-header">
      <h1>Create New Chatbot</h1>
      <a href="/chatbots" class="btn-outline">Back to Chatbots</a>
    </div>

    <div class="form-section">
      <h2>Chatbot Basics</h2>
      <div class="form-group">
        <label for="chatbot-name">Chatbot Name*</label>
        <input 
          type="text" 
          id="chatbot-name" 
          placeholder="e.g. Customer Support Bot" 
          required
        />
      </div>
    </div>

    <form class="chatbot-form" id="chatbot-creation-form">
      <div class="form-section">
        <h2>Slots</h2>
        <p class="form-hint">Define collectable slots (e.g., "user_name", "email")</p>

        <div id="slots-container">
          <div class="slot-entry" data-id="1">
            <div class="form-group">
              <div class="slot-input-wrapper">
                <label>Slot Name*</label>
                <input type="text" name="slot-1" placeholder="e.g. user_name" required />
              </div>
              <button type="button" class="btn-remove-slot">Remove</button>
            </div>
          </div>
        </div>

        <button type="button" id="add-slot-btn" class="btn-outline">+ Add Slot</button>
      </div>

      <div class="form-section">
        <h2>Intents</h2>
        <p class="form-hint">Define user intents and example phrases</p>
        
        <div id="intents-container">
          <div class="intent-entry" data-id="1">
            <div class="intent-header">
              <h3>Intent #1</h3>
              <button type="button" class="btn-remove">
                Remove
              </button>
            </div>
            
            <div class="form-group">
              <label>Intent Name*</label>
              <input 
                type="text" 
                name="intent-name-1"
                placeholder="greeting" 
                required
              />
              <p class="form-hint">Simple identifier for this intent</p>
            </div>
            
            <div class="form-group">
              <label>Example Phrases* (one per line)</label>
              <textarea 
                name="intent-examples-1"
                rows="3"
                placeholder="Hi\nHello\nMy name is {user_name}"
                required
              ></textarea>
            </div>

            <div class="slot-mappings" id="slot-mappings-1"></div>
          </div>
        </div>
        
        <button type="button" id="add-intent-btn" class="btn-outline">
          + Add New Intent
        </button>
      </div>

      <div class="form-section">
        <h2>Responses</h2>
        <p class="form-hint">Define bot responses to intents</p>
        
        <div id="utterances-container">
          <div class="utterance-entry" data-id="1">
            <div class="utterance-header">
              <h3>Response #1</h3>
              <button type="button" class="btn-remove">
                Remove
              </button>
            </div>
            
            <div class="form-group">
              <label>Response Name*</label>
              <input 
                type="text" 
                name="utterance-name-1"
                placeholder="greet" 
                required
              />
              <p class="form-hint">Simple identifier for response</p>
            </div>
            
            <div class="form-group">
              <label>Response Text*</label>
              <textarea 
                name="utterance-text-1"
                rows="2"
                placeholder="Hello! How can I help you today?"
                required
              ></textarea>
            </div>
          </div>
        </div>
        
        <button type="button" id="add-utterance-btn" class="btn-outline">
          + Add New Response
        </button>
      </div>

      <div class="form-actions">
        <button type="submit" class="btn-primary">Create Chatbot</button>
      </div>
    </form>
  </main>

  <script>
    let slotCount = 1;
    let intentCount = 1;
    let utteranceCount = 1;

    function attachSlotRemoveListener(slotElement) {
      const removeBtn = slotElement.querySelector('.btn-remove-slot');
      if (removeBtn) {
        removeBtn.addEventListener('click', () => {
          slotElement.remove();
          updateAllSlotMappings();
        });
      }
    }

    function getAvailableSlots() {
        const slots = [];
        document.querySelectorAll('#slots-container input[name^="slot-"]').forEach(input => {
            if (input.value.trim()) {
                slots.push(input.value.trim());
            }
        });
        return slots;
    }

    function extractPlaceholders(text) {
        const regex = /{([^}]+)}/g;
        const placeholders = [];
        let match;
        while ((match = regex.exec(text)) !== null) {
            if (!placeholders.includes(match[1])) {
                placeholders.push(match[1]);
            }
        }
        return placeholders;
    }

    function updateSlotMappings(intentId) {
        const textarea = document.querySelector(`[name="intent-examples-${intentId}"]`);
        const mappingsContainer = document.getElementById(`slot-mappings-${intentId}`);
        
        if (!textarea || !mappingsContainer) return;

        const text = textarea.value;
        const placeholders = extractPlaceholders(text);
        const availableSlots = getAvailableSlots();

        if (placeholders.length === 0) {
            mappingsContainer.innerHTML = '';
            return;
        }

        let mappingsHTML = `
            <div class="slot-mapping">
                <h4>Slot Mappings</h4>
                <p class="form-hint">Map placeholders to your defined slots:</p>
        `;

        placeholders.forEach(placeholder => {
            mappingsHTML += `
                <div class="slot-mapping-item">
                    <span class="placeholder-text">{${placeholder}}</span>
                    <span>â†’</span>
                    <select name="slot-mapping-${intentId}-${placeholder}">
                        <option value="">Select slot...</option>
                        ${availableSlots.map(slot => `
                            <option value="${slot}" ${slot === placeholder ? 'selected' : ''}>
                                ${slot}
                            </option>
                        `).join('')}
                    </select>
                </div>
            `;
        });

        mappingsHTML += '</div>';
        mappingsContainer.innerHTML = mappingsHTML;
    }

    function updateAllSlotMappings() {
        document.querySelectorAll('.intent-entry').forEach(intent => {
            const id = intent.dataset.id;
            updateSlotMappings(id);
        });
    }

    function attachIntentListeners(intentElement) {
        const id = intentElement.dataset.id;
        const textarea = intentElement.querySelector(`[name="intent-examples-${id}"]`);
        
        if (textarea) {
            textarea.addEventListener('input', () => {
                updateSlotMappings(id); 
            });
        }
    }

    function removeIntent(id) {
      const intent = document.querySelector(`.intent-entry[data-id="${id}"]`);
      if (intent) {
        intent.remove();
        
        const intents = document.querySelectorAll('.intent-entry');
        intents.forEach((intent, index) => {
          const newId = index + 1;
          intent.dataset.id = newId;
          intent.querySelector('h3').textContent = `Intent #${newId}`;
          
          intent.querySelectorAll('[name^="intent-name-"]').forEach(input => {
            input.name = `intent-name-${newId}`;
          });
          intent.querySelectorAll('[name^="intent-examples-"]').forEach(input => {
            input.name = `intent-examples-${newId}`;
          });
          
          const mappingsContainer = intent.querySelector('.slot-mappings');
          if (mappingsContainer) {
            mappingsContainer.id = `slot-mappings-${newId}`;
          }
        });
        
        intentCount = intents.length;
      }
    }

    function removeUtterance(id) {
      const utterance = document.querySelector(`.utterance-entry[data-id="${id}"]`);
      if (utterance) {
        utterance.remove();
        
        const utterances = document.querySelectorAll('.utterance-entry');
        utterances.forEach((utterance, index) => {
          const newId = index + 1;
          utterance.dataset.id = newId;
          utterance.querySelector('h3').textContent = `Response #${newId}`;
          
          utterance.querySelectorAll('[name^="utterance-name-"]').forEach(input => {
            input.name = `utterance-name-${newId}`;
          });
          utterance.querySelectorAll('[name^="utterance-text-"]').forEach(input => {
            input.name = `utterance-text-${newId}`;
          });
        });
        
        utteranceCount = utterances.length;
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const initialSlot = document.querySelector('.slot-entry[data-id="1"]');
      if (initialSlot) {
        attachSlotRemoveListener(initialSlot);
        const slotInput = initialSlot.querySelector('input');
        if (slotInput) {
          slotInput.addEventListener('input', updateAllSlotMappings);
        }
      }

      const initialIntent = document.querySelector('.intent-entry[data-id="1"]');
      if (initialIntent) {
        attachIntentListeners(initialIntent);
        const initialIntentRemove = initialIntent.querySelector('.btn-remove');
        if (initialIntentRemove) {
          initialIntentRemove.addEventListener('click', () => removeIntent(1));
        }
      }

      const initialUtteranceRemove = document.querySelector('.utterance-entry .btn-remove');
      if (initialUtteranceRemove) {
        initialUtteranceRemove.addEventListener('click', () => removeUtterance(1));
      }

      document.getElementById('add-slot-btn').addEventListener('click', () => {
        slotCount++;
        const newSlot = document.createElement('div');
        newSlot.className = 'slot-entry';
        newSlot.dataset.id = slotCount;
        newSlot.innerHTML = `
          <div class="form-group">
            <div class="slot-input-wrapper">
              <label>Slot Name*</label>
              <input type="text" name="slot-${slotCount}" placeholder="e.g. email" required />
            </div>
            <button type="button" class="btn-remove-slot">Remove</button>
          </div>
        `;
        document.getElementById('slots-container').appendChild(newSlot);
        attachSlotRemoveListener(newSlot);

        const slotInput = newSlot.querySelector('input');
        if (slotInput) {
          slotInput.addEventListener('input', updateAllSlotMappings);
        }
      });

      document.getElementById('add-intent-btn').addEventListener('click', () => {
        intentCount++;
        const newIntent = document.createElement('div');
        newIntent.className = 'intent-entry';
        newIntent.dataset.id = intentCount;
        newIntent.innerHTML = `
          <div class="intent-header">
            <h3>Intent #${intentCount}</h3>
            <button type="button" class="btn-remove">
              Remove
            </button>
          </div>
          
          <div class="form-group">
            <label>Intent Name*</label>
            <input 
              type="text" 
              name="intent-name-${intentCount}"
              placeholder="greeting" 
              required
            />
            <p class="form-hint">Simple identifier for this intent</p>
          </div>
          
          <div class="form-group">
            <label>Example Phrases* (one per line)</label>
            <textarea 
              name="intent-examples-${intentCount}"
              rows="3"
              placeholder="Hi\nHello\nHey there"
              required
            ></textarea>
          </div>

          <div class="slot-mappings" id="slot-mappings-${intentCount}"></div>
        `;
        document.getElementById('intents-container').appendChild(newIntent);
        
        attachIntentListeners(newIntent);
        newIntent.querySelector('.btn-remove').addEventListener('click', () => removeIntent(intentCount));
      });

      document.getElementById('add-utterance-btn').addEventListener('click', () => {
        utteranceCount++;
        const newUtterance = document.createElement('div');
        newUtterance.className = 'utterance-entry';
        newUtterance.dataset.id = utteranceCount;
        newUtterance.innerHTML = `
          <div class="utterance-header">
            <h3>Response #${utteranceCount}</h3>
            <button type="button" class="btn-remove">
              Remove
            </button>
          </div>
          
          <div class="form-group">
            <label>Response Name*</label>
            <input 
              type="text" 
              name="utterance-name-${utteranceCount}"
              placeholder="greet" 
              required
            />
            <p class="form-hint">Simple identifier for this response</p>
          </div>
          
          <div class="form-group">
            <label>Response Text*</label>
            <textarea 
              name="utterance-text-${utteranceCount}"
              rows="2"
              placeholder="Hello! How can I help you today?"
              required
            ></textarea>
          </div>
        `;
        document.getElementById('utterances-container').appendChild(newUtterance);
        newUtterance.querySelector('.btn-remove').addEventListener('click', () => removeUtterance(utteranceCount));
      });
    });
    
    document.getElementById('chatbot-creation-form').addEventListener('submit', (e) => {
      e.preventDefault();
      
      const chatbotData = {
        name: document.getElementById('chatbot-name').value,
        slots: [],
        intents: [],
        utterances: []
      };

      document.querySelectorAll('#slots-container .slot-entry').forEach(slot => {
        const input = slot.querySelector('input');
        if (input && input.value.trim()) {
          chatbotData.slots.push(input.value.trim());
        }
      });

      document.querySelectorAll('.intent-entry').forEach(intent => {
        const id = intent.dataset.id;
        const intentData = {
          name: intent.querySelector(`[name="intent-name-${id}"]`).value,
          examples: intent.querySelector(`[name="intent-examples-${id}"]`).value.split('\n').filter(q => q.trim()),
          slotMappings: {}
        };

        intent.querySelectorAll(`[name^="slot-mapping-${id}-"]`).forEach(select => {
          if (select.value) {
            const placeholder = select.name.split('-').pop();
            intentData.slotMappings[placeholder] = select.value;
          }
        });

        chatbotData.intents.push(intentData);
      });

      document.querySelectorAll('.utterance-entry').forEach(utterance => {
        const id = utterance.dataset.id;
        chatbotData.utterances.push({
          name: utterance.querySelector(`[name="utterance-name-${id}"]`).value,
          text: utterance.querySelector(`[name="utterance-text-${id}"]`).value
        });
      });
      
      console.log('Chatbot data to submit:', chatbotData);
      alert('Chatbot created successfully! (Check console for data structure)');
    });
  </script>
</Layout>
